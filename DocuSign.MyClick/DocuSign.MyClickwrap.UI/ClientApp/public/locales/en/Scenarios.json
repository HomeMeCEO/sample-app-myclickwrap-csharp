{
  "Title": "Choose your scenario",
  "Scenario3": {
    "Title": "Terms and Conditions",
    "Link": "/termsandconditions/",
    "Description": "Terms and Conditions Info",
    "Intro": "This scenario shows how the Click API can be used to embed the required consent from individuals for standard terms and conditions, including private policy, for any website.",
    "CodeFlow": "<strong class='text-uppercase'>Code flow: </strong><strong>Step 1</strong><p>When the form is submitted, the client-side code calls the server-side code to find the information needed to show the clickwrap.<br>The server gets the list of all clickwraps in the specified DocuSign account using the <a target='blank' href='https://developers.docusign.com/docs/click-api/reference/Accounts/ClickWraps/getClickwraps/'>ClickWraps:getClickwraps</a> API call. The code then proceeds to ensure it can find the desired clickwrap based on the ClickwrapName property.<br>Once the server gathers all the information, it sends it back to the client, including the <code>clickWrapID</code>, the <code>accountId</code>, the email address, and the <code>baseUrl</code> for DocuSign. To render the clickwrap on the site, the code makes a JavaScript API call to the <code>docuSignClick.Clickwrap.render()</code> method. That method takes four arguments: the <code>environment</code> (https://demo.docusign.net in our case), the <code>accountID</code> (GUID) of the DocuSign account, the <code>clickwrapId</code> (GUID) retrieved with the server API call, and the email address, which is called <code>clientUserId</code>. To make this client-side API vall the code needs to include https://demo.docusign.net/clickapi/sdk/latest/docusign-click.js in the page as a script element.</p>"
  },
  "Scenario2": {
    "Title": "Nondisclosure Agreement",
    "Link": "/nondisclosureagreement/",
    "Description": "Nondisclosure Agreement Info",
    "Intro": "This scenario shows how the Click API can be used to build a simple tool to enable organizations to capture consent  for a standard non-disclosure agreement (NDA) on their own website or app.",
    "CodeFlow": "<strong class='text-uppercase'>Code flow: </strong><strong>Step 1</strong><p>When the form is submitted, the client-side code calls the server-side code to find the information needed to show the clickwrap.<br>The server gets the list of all clickwraps in the specified DocuSign account using the <a target='blank' href='https://developers.docusign.com/docs/click-api/reference/Accounts/ClickWraps/getClickwraps/'>ClickWraps:getClickwraps</a> API call. The code then proceeds to ensure it can find the desired clickwrap based on the ClickwrapName property.<br>Once the server gathers all the information, it sends it back to the client, including the <code>clickWrapID</code>, the <code>accountId</code>, the email address, and the <code>baseUrl</code> for DocuSign. To render the clickwrap on the site, the code makes a JavaScript API call to the <code>docuSignClick.Clickwrap.render()</code> method. That method takes four arguments: the <code>environment</code> (https://demo.docusign.net in our case), the <code>accountID</code> (GUID) of the DocuSign account, the <code>clickwrapId</code> (GUID) retrieved with the server API call, and the email address, which is called <code>clientUserId</code>. To make this client-side API vall the code needs to include https://demo.docusign.net/clickapi/sdk/latest/docusign-click.js in the page as a script element.</p>"
  },
  "Scenario1": {
    "Title": "COVID-19 Health Declaration",
    "Link": "/covid19waiver/",
    "Description": "COVID-19 Health Declaration Info",
    "Intro": "This scenario shows how the Click API can be used to build a simple tool to enable organizations to capture consent from individuals releasing the organization from responsibility in case they contract COVID-19 while on their premises.",
    "CodeFlow": "<strong class='text-uppercase'>Code flow: </strong><strong>Step 1</strong><p>When the form is submitted, the client-side code calls the server-side code to find the information needed to show the clickwrap.<br>The server gets the list of all clickwraps in the specified DocuSign account using the <a target='blank' href='https://developers.docusign.com/docs/click-api/reference/Accounts/ClickWraps/getClickwraps/'>ClickWraps:getClickwraps</a> API call. The code then proceeds to ensure it can find the desired clickwrap based on the ClickwrapName property.<br>Once the server gathers all the information, it sends it back to the client, including the <code>clickWrapID</code>, the <code>accountId</code>, the email address, and the <code>baseUrl</code> for DocuSign. To render the clickwrap on the site, the code makes a JavaScript API call to the <code>docuSignClick.Clickwrap.render()</code> method. That method takes four arguments: the <code>environment</code> (https://demo.docusign.net in our case), the <code>accountID</code> (GUID) of the DocuSign account, the <code>clickwrapId</code> (GUID) retrieved with the server API call, and the email address, which is called <code>clientUserId</code>. To make this client-side API vall the code needs to include https://demo.docusign.net/clickapi/sdk/latest/docusign-click.js in the page as a script element.</p>"
  },
  "TryMeButton": "Try Me"
}
